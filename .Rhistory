library(brms)
#library(ggplot)
dataset <- read.csv("/Users/e102314/Desktop/Bayesian-data-analysis/Project-work/all_000000000000.csv")
df = dataset[sample(nrow(dataset),100),
c('trainstation','train_type','train_count',
'mean_temperature','max_snowdepth','min_vis','delay')]
summary(df)
p = ggplot(data=df, aes(x=mean_temperature, y=delay, group=as.factor(trainstation)))+
geom_point(size=.7, col="grey", alpha=.8, position = "jitter")+
geom_smooth(method=lm,se=FALSE, col="black", size=.5, alpha=.8)+theme_minimal()+labs(title="Linear Relationship Between DELAY and Mean_Temperature for 439 Trainstation", subtitle="The linear relationship between the two is not the same for all trainstations")
p+coord_cartesian(xlim = c(-20,30) , ylim = c(0,60))
ggplot(data=df, aes(x=mean_temperature, y=delay, col=as.factor(train_type)))+
geom_point(size=1, alpha=.7, position = "jitter")+
geom_smooth(method=lm,se=T, size=1.5, linetype=1, alpha=.7)+theme_minimal()+labs(title="Linear Relationship Between DELAY and Mean_Temperature for the 4 train_type", subtitle="")
lin.mod <- brm(delay ~ 1 + trainstation + train_type + train_count + max_snowdepth + mean_temperature + min_vis, data = df[1:100,], family = "gaussian")
lin.mod
lin.mod$model
pp_check(lin.mod)
head(predict(lin.mod))
rhat(lin.mod)
stanplot(lin.mod)
stanplot(lin.mod, type = 'neff')
stanplot(lin.mod, type = 'rhat')
get_prior(lin.mod)
prior_summary(lin.mod)
install.packages("brms")
install.packages("tidyverse")
install.packages("brms")
install.packages("brms")
install.packages("brms")
install.packages("brms")
require(lubridate)
library(anytime)
library(ggplot2)
library(brms)
theme_set(theme_minimal())
data_file <- "tiny_filtered.csv"
# data_file <- "data/2010q1_filtered.csv"
val_data_file <- "validation.csv"
df <- read.csv(data_file)
df$datetime <- anytime::anytime(df$time)
library(scales)
options(repr.plot.width=10, repr.plot.height=4)
ggplot(data = df, aes(x = datetime, y = delay))+
geom_line(color = "#00AFBB", size = 1) +
scale_x_datetime(date_labels = "%a %d %b %Y", breaks = date_breaks("1 day"),
minor_breaks = date_breaks("2 hour")) +
theme(axis.text.x=element_text(angle=45, hjust=1))
options(mc.cores = parallel::detectCores())
fit1 <- brm(
cbind(delay) ~ (1|p|min_temperature) + (1|q|pressure) +
(1|r|mean_humidity) + (1|s|max_windgust) +
(1|t|min_clhb) + (1|u|max_precipitation6h),
data = df
)
options(mc.cores = parallel::detectCores())
fit1 <- brm(
cbind(delay) ~ (1|p|min_temperature) + (1|q|pressure) +
(1|r|mean_humidity) + (1|s|max_windgust) +
(1|t|min_clhb) + (1|u|max_precipitation6h),
data = df
)
hist(subset(df_delay, pressure != -99)[,pressure],
main=paste("Histogram fors ",pressure),
xlab='', col='#00AFBB', border='#00AFBB',
breaks=50)
df_delay <- df[df$delay > 5,]
hist(subset(df_delay, pressure != -99)[,pressure],
main=paste("Histogram fors ",pressure),
xlab='', col='#00AFBB', border='#00AFBB',
breaks=50)
df_delay <- df[df$delay > 5,]
hist(subset(df_delay, pressure != -99)[,"pressure"],
main=paste("Histogram fors ",pressure),
xlab='', col='#00AFBB', border='#00AFBB',
breaks=50)
x <- seq(-4, 4, length=100)
hx <- dgamma(x)
x <- seq(-4, 4, length=100)
hx <- dgamma(x,shape = (100,1))
x <- seq(-4, 4, length=100)
hx <- dgamma(shape = (100,1))
x <- seq(-4, 4, length=100)
hx <- lines( sort(x) , y = dgamma( sort(x) , shape = 8 , scale = 0.1 ) , col = "blue" , lty = 2 , lwd = 2 )
x <- seq(-4, 4, length=100)
hx <- lines( sort(x) , y = dgamma( sort(x) , shape = 8 , scale = 0.1 ) , col = "blue" , lty = 2 , lwd = 2 )
k <- c(1, 2, 2)
mu <- c(1, 1, 2)
theta <- mu/k
plot(0, 0, xlim = c(0, 10), ylim = c(0, 1), type = "n")
for(i in seq_along(k))
curve(dgamma(x, shape = k[i], scale = theta[i]), from = 0, to = 10, col = i, add = TRUE)
k <- c(1)
mu <- c(1)
theta <- mu/k
plot(0, 0, xlim = c(0, 10), ylim = c(0, 1), type = "n")
for(i in seq_along(k))
curve(dgamma(x, shape = k[i], scale = theta[i]), from = 0, to = 10, col = i, add = TRUE)
k <- c(1)
mu <- c(1000)
theta <- mu/k
plot(0, 0, xlim = c(0, 10), ylim = c(0, 1), type = "n")
for(i in seq_along(k))
curve(dgamma(x, shape = k[i], scale = theta[i]), from = 0, to = 10, col = i, add = TRUE)
k <- c(1)
mu <- c(1)
theta <- mu/k
plot(0, 0, xlim = c(0, 10), ylim = c(0, 1), type = "n")
for(i in seq_along(k))
curve(dgamma(x, shape = k[i], scale = theta[i]), from = 0, to = 10, col = i, add = TRUE)
k <- c(1)
mu <- c(1000)
theta <- mu/k
plot(0, 0, xlim = c(0, 10), ylim = c(0, 1), type = "n")
for(i in seq_along(k))
curve(dgamma(x, shape = k[i], scale = theta[i]), from = 0, to = 10, col = i, add = TRUE)
k <- c(15)
mu <- c(20)
theta <- mu/k
plot(0, 0, xlim = c(0, 10), ylim = c(0, 1), type = "n")
for(i in seq_along(k))
curve(dgamma(x, shape = k[i], scale = theta[i]), from = 0, to = 10, col = i, add = TRUE)
k <- c(15)
mu <- c(20)
theta <- mu/k
plot(0, 0, xlim = c(0, 1000), ylim = c(0, 1000), type = "n")
for(i in seq_along(k))
curve(dgamma(x, shape = k[i], scale = theta[i]), from = 0, to = 10, col = i, add = TRUE)
k <- c(15)
mu <- c(20)
theta <- mu/k
plot(0, 0, type = "n")
for(i in seq_along(k))
curve(dgamma(x, shape = k[i], scale = theta[i]), from = 0, to = 10, col = i, add = TRUE)
rm(list=ls())
require(lubridate)
library(anytime)
library(ggplot2)
library(brms)
theme_set(theme_minimal())
install.packages("lubridate")
require(lubridate)
library(anytime)
library(ggplot2)
library(brms)
theme_set(theme_minimal())
data_file <- "tiny_filtered.csv"
val_data_file <- "validation.csv"
df <- read.csv(data_file)
df$datetime <- anytime::anytime(df$time)
head(df)
tail(df)
dim(df)
library(scales)
options(repr.plot.width=10, repr.plot.height=4)
ggplot(data = df, aes(x = datetime, y = delay))+
geom_line(color = "#00AFBB", size = 1) +
scale_x_datetime(date_labels = "%a %d %b %Y", breaks = date_breaks("1 day"),
minor_breaks = date_breaks("2 hour")) +
theme(axis.text.x=element_text(angle=45, hjust=1))
library(reshape2)
cols = c('train_count', 'delay', 'total_delay',
'min_temperature', 'mean_temperature',
'max_temperature', 'pressure', 'mean_humidity',
'mean_winddirection', 'mean_windspeedms', 'max_windgust',
'max_precipitation1h', 'max_snowdepth', 'max_n',
'min_vis', 'min_clhb', 'max_precipitation3h',
'max_precipitation6h', 'flashcount')
#ggplot(melt(df, id=cols), aes(x = value)) +
#    facet_wrap(~ variable, scales = "free", ncol = 2) +
#    geom_histogram(binwidth = .5)
par(mfrow=c(2,3))
options(repr.plot.width=10, repr.plot.height=6)
#subset(df, 'max_snowdepth'!=-99)
for (col in cols){
#    ggplot(df, aes(data)) +
#      facet_wrap(~ col, scales = "free", ncol = 2) +
#      geom_histogram(stat="count")
hist(subset(df, col != -99)[,col],
main=paste("Histogram fors ",col),
xlab='', col='#00AFBB', border='#00AFBB',
breaks=50)
}
df_delay <- df[df$delay > 5,]
par(mfrow=c(2,3))
for (col in cols){
hist(subset(df_delay, col != -99)[,col],
main=paste("Histogram fors ",col),
xlab='', col='#00AFBB', border='#00AFBB',
breaks=50)
}
df_delay <- df[df$delay > 5,]
hist(subset(df, min_temperature != -99)[,"min_temperature"],
main="Histogram fors minimum temperature",
xlab='', col='#00AFBB', border='#00AFBB',
breaks=50)
hist(subset(df, pressure != -99)[,"pressure"],
main="Histogram fors pressure",
xlab='', col='#00AFBB', border='#00AFBB',
breaks=50)
hist(subset(df, mean_humidity != -99)[,"mean_humidity"],
main="Histogram fors mean humidity",
xlab='', col='#00AFBB', border='#00AFBB',
breaks=50)
hist(subset(df, max_windgust != -99)[,"max_windgust"],
main="Histogram fors maximum wind gust",
xlab='', col='#00AFBB', border='#00AFBB',
breaks=50)
hist(subset(df, mean_winddirection != -99)[,"mean_winddirection"],
main="Histogram for wind direction",
xlab='', col='#00AFBB', border='#00AFBB',
breaks=50)
hist(subset(df, max_precipitation6h != -99)[,"max_precipitation6h"],
main="Histogram fors 6 hour precipitation sum",
xlab='', col='#00AFBB', border='#00AFBB',
breaks=50)
date1 <- as.POSIXct("2010-01-01 00:00:00")
date2 <- as.POSIXct("2010-01-02 00:00:00")
int <- new_interval(date1, date2)
df_tiny <- df[df$datetime %within% int,]
dim(df_tiny)
options(mc.cores = parallel::detectCores())
fit1 <- brm(
delay ~ 1 + min_temperature + pressure +
mean_humidity + max_windgust +
mean_winddirection +
max_precipitation6h + (1|p|traintype),
data = df_tiny
)
options(mc.cores = parallel::detectCores())
fit1 <- brm(
delay ~ 1 + min_temperature + pressure +
mean_humidity + max_windgust +
mean_winddirection +
max_precipitation6h + (1|p|train_type),
data = df_tiny
)
summary(fit1)
prior_summary(fit1)
fit1$model
fit1$model
plot(fit1)
rhat(fit1)
stanplot(fit1, type='neff')
stanplot(fit1, type='rhat')
library("bayesplot")
yrep <- posterior_predict(fit1, draws = 500)
y <- df_tiny$delay
ppc_stat(y, yrep, binwidth=.005)
zero <- function(x) mean(x == 0)
ppc_stat(y, yrep, 'zero', binwidth=.005)
over5 <- function(x) mean(x > 5)
ppc_stat(y, yrep, 'over5', binwidth=.005)
ppc_dens_overlay(y, yrep)
ppc_hist(y, yrep[1:5, ], binwidth=.005)
validation <- read.csv(val_data_file)
validation$datetime <- anytime::anytime(validation$time)
val_data <- validation[,c('min_temperature', 'pressure')]
pred <- predict(fit2, newdata = val_data, re_formula = NA)
val_data <- validation[,c('min_temperature', 'pressure')]
pred <- predict(fit1, newdata = val_data, re_formula = NA)
options(repr.plot.width=4, repr.plot.height=4)
summary(pred)
